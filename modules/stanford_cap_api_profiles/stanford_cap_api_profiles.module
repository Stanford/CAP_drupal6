<?php
/**
 * @file
 * Code for the Stanford CAP API profiles feature.
 */

include_once 'stanford_cap_api_profiles.features.inc';
include_once 'stanford_cap_api_profiles.admin.inc';
define('CAP_FIELDS_PREFIX', 'field_cap_');
define('CAP_FIELDS_IMPORT_ALL', 'import_all');
define('CAP_FIELDS_IMPORT_LIST', 'import_list');
define('CAP_PROFILES_PER_REQUEST', 10);
define('CAP_PROFILES_UPDATE_ON_VIEW', 'viewing');
define('CAP_PROFILES_UPDATE_NIGHTLY', 'nightly');

/**
 * Implements hook_menu().
 */
function stanford_cap_api_profiles_menu() {
  $items = array();

  if (variable_get('stanford_cap_api_profiles_schema_synchronized', FALSE)) {
    $items['admin/settings/cap/config/import'] = array(
      'title' => 'Profile import',
      'description' => 'Provides administrators ability to import CAP profiles.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('stanford_cap_api_profiles_import_form'),
      'access arguments' => array('administer cap api'),
      'weight' => -4,
      'file' => 'stanford_cap_api_profiles.admin.inc',
      'type' => MENU_LOCAL_TASK,
    );

    $items['admin/settings/cap/config/import/result'] = array(
      'title' => 'Profile import',
      'description' => 'Provides administrators ability to import CAP profiles.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('stanford_cap_api_profiles_import_result_form'),
      'access arguments' => array('administer cap api'),
      'file' => 'stanford_cap_api_profiles.admin.inc',
      'type' => MENU_CALLBACK,
    );

    $items['admin/settings/cap/config/group'] = array(
      'title' => 'Group import',
      'description' => 'Provides administrators ability to synchronize groups of CAP profiles.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('stanford_cap_api_profiles_group_sync_form'),
      'access arguments' => array('administer cap api'),
      'weight' => -5,
      'file' => 'stanford_cap_api_profiles.admin.inc',
      'type' => MENU_LOCAL_TASK,
    );

    $items['admin/settings/cap/config/group/%/delete'] = array(
      'title' => 'Drop group from synchronization',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('stanford_cap_api_profiles_group_sync_drop_form', 5),
      'access arguments' => array('administer cap api'),
      'type' => MENU_CALLBACK,
      'file' => 'stanford_cap_api_profiles.admin.inc',
    );

    $items['admin/settings/cap/config/group/%/sync'] = array(
      'title' => 'Synchronize group',
      'page callback' => 'stanford_cap_api_profiles_group_sync_now',
      'page arguments' => array(5),
      'access arguments' => array('administer cap api'),
      'type' => MENU_CALLBACK,
      'file' => 'stanford_cap_api_profiles.admin.inc',
    );

    $items['stanford-cap-api-user-autocomplete'] = array(
      'title' => 'Autocomplete for CAP profile names',
      'page callback' => 'stanford_cap_api_profiles_user_autocomplete',
      'access arguments' => array('administer cap api'),
      'type' => MENU_CALLBACK,
      'file' => 'stanford_cap_api_profiles.admin.inc',
    );

    $items['stanford-cap-api-org-autocomplete'] = array(
      'title' => 'Autocomplete for CAP organization names',
      'page callback' => 'stanford_cap_api_profiles_taxonomy_autocomplete',
      'access arguments' => array('administer cap api'),
      'type' => MENU_CALLBACK,
      'file' => 'stanford_cap_api_profiles.admin.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_perm().
 */
function stanford_cap_api_profiles_perm() {
  return array('administer cap api');
}

/**
 * Implements hook_menu_alter().
 */
function stanford_cap_api_profiles_menu_alter(&$items) {
  // Disables access to node edit page for profile nodes, if set in settings.
  $items['node/%node/edit']['access callback'] = 'stanford_cap_api_profiles_node_access';
  $content_type = content_types('cap_stanford_profile');
  // If content type is not defined yet returned value will be array
  // with some empty values.
  if (!empty($content_type['url_str'])) {
    $items['admin/content/node-type/' . $content_type['url_str'] . '/fields']['access callback'] = 'stanford_cap_api_profiles_user_access';
    foreach ((array) $content_type['fields'] as $field) {
      $items['admin/content/node-type/' . $content_type['url_str'] . '/fields/' . $field['field_name']]['access callback'] = 'stanford_cap_api_profiles_user_access';
    }
  }
  // Forbid to create new nodes of types which used in profiles flexifields.
  foreach (node_get_types('types', NULL, TRUE) as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['node/add/' . $type_url_str]['access callback'] = 'stanford_cap_api_profiles_flexifield_access';
  }
}

/**
 * Access check callback.
 *
 * Disables access to node edit page for profile nodes.
 */
function stanford_cap_api_profiles_node_access($op, $node) {
  $access = node_access($op, $node);
  if ($access && $node->type == 'cap_stanford_profile') {
    if (!variable_get('stanford_cap_api_profile_allow_edit', FALSE)) {
      $access = FALSE;
    }
  }

  return $access;
}

/**
 * Access override for content types.
 *
 * Hide all content types created by this module
 * if "Allow user to create custom fields?" setting is empty.
 */
function stanford_cap_api_profiles_flexifield_access($op, $node_type) {
  $access = node_access($op, $node_type);
  if ($access && in_array($node_type, _stanford_cap_api_profiles_get_flexifields())) {
    if (!variable_get('stanford_cap_api_profile_custom_fields', FALSE)) {
      $access = FALSE;
    }
  }

  return $access;
}

/**
 * Access check callback.
 *
 * Disables manage fields page for profile node type.
 */
function stanford_cap_api_profiles_user_access($permission) {
  $access = user_access($permission);
  if ($access) {
    if (!variable_get('stanford_cap_api_profile_custom_fields', FALSE)) {
      $access = FALSE;
    }
  }

  return $access;
}

/**
 * Implements hook_cron().
 */
function stanford_cap_api_profiles_cron() {
  $tasks = array(
    array('stanford_cap_api_profiles_synchronize_schema'),
    array('stanford_cap_api_profiles_update_profiles'),
    array('stanford_cap_api_profiles_sync_group_cron'),
    array('variable_set', array('stanford_cap_api_profiles_cron_last_run', REQUEST_TIME)),
  );
  stanford_cap_api_run_cron($tasks);
}

/**
 * Import CAP profile.
 *
 * @param int $profile_id
 *   Profile ID.
 */
function stanford_cap_api_profiles_profile_import($profile_id) {
  $etag = stanford_cap_api_profiles_get_profile_etag($profile_id);
  $stored_metadata = stanford_cap_api_profiles_get_stored_profile_data($profile_id);
  if (empty($etag) && !empty($stored_metadata['etag'])) {
    // Profile is synced, but deleted from CAP.
    $action = variable_get('cap_stanford_cap_api_profile_orphaned_action', 'unpublish');
    switch ($action) {
      case 'unpublish':
        $nid = db_result(db_query("SELECT nid FROM {cap_api_profiles} WHERE profile_id = '%s'", $profile_id));
        $node = node_load($nid);
        $node->status = 0;
        node_save($node);
        db_query("DELETE FROM {cap_api_profiles} WHERE profile_id = '%s'", $profile_id);
        break;

      case 'remove':
        $nid = db_result(db_query("SELECT nid FROM {cap_api_profiles} WHERE profile_id = '%s'", $profile_id));
        db_query("DELETE FROM {cap_api_profiles} WHERE profile_id = '%s'", $profile_id);
        node_delete($nid);
        break;
    }
  }
  elseif (!empty($stored_metadata['etag']) && empty($stored_metadata['sync'])) {
    // Do nothing, we have synced flag off.
  }
  elseif (empty($stored_metadata['etag']) || $etag != $stored_metadata['etag']) {
    // Profile not stored or updated.
    $profile = stanford_cap_api_profiles_get_profile($profile_id);
    if ($profile) {
      if (!variable_get('stanford_cap_api_profiles_schema_synchronized', FALSE)) {
        stanford_cap_api_profiles_synchronize_schema();
      }
      stanford_cap_api_profiles_synchronize_data($profile);
    }
  }
}

/**
 * Loads profile from CAP network.
 *
 * @param string $profile_id
 *   Profile ID.
 *
 * @return array|FALSE
 *   Profile or FALSE.
 */
function stanford_cap_api_profiles_get_profile($profile_id) {
  static $cache = array();
  if (empty($cache[$profile_id])) {
    $cache[$profile_id] = stanford_cap_api_request('/profiles/v1/' . $profile_id);
  }

  return $cache[$profile_id];
}

/**
 * Returns profile type.
 *
 * @param array $profile
 *   CAP API profile.
 *
 * @return string
 *   Type.
 */
function stanford_cap_api_profiles_get_profile_type($profile) {
  $type = NULL;
  foreach ($profile['affiliations'] as $affiliation => $enabled) {
    if ($affiliation == 'capFaculty' && $enabled) {
      $type = 'faculty';
      break;
    }
  }

  return $type;
}

/**
 * Finished callback for profiles import page.
 */
function stanford_cap_api_profiles_import_result_finished() {
  drupal_set_message(t('Profiles imported!'));
  unset($_SESSION['search_params']);
  unset($_SESSION['search_response']);
  drupal_goto('admin/settings/cap/config/import');
}

/**
 * Synchronize CAP network profile data with Drupal node.
 *
 * @param array $profile
 *   CAP network profile.
 */
function stanford_cap_api_profiles_synchronize_data($profile) {
  $nid = db_result(db_query("SELECT nid FROM {cap_api_profiles} WHERE profile_id = '%d'", $profile['profileId']));
  $node = $nid ? node_load($nid) : FALSE;
  if ($node) {
    stanford_cap_api_profiles_node_fields_update($node, $profile);
  }
  else {
    // Importing.
    $node = new stdClass();
    $node->title = $profile['displayName'];
    $node->uid = 0;
    $node->status = 1;
    $node->type = 'cap_stanford_profile';
    $node->created = REQUEST_TIME;
    $node->changed = REQUEST_TIME;
    $node->is_new = TRUE;
    stanford_cap_api_profiles_node_fields_import($node, $profile);
  }
  // Saving profile<->node association.
  $record = array(
    'profile_id' => $profile['profileId'],
    'nid' => $node->nid,
    'etag' => $profile['meta']['etag'],
  );
  $id = db_result(db_query("SELECT id FROM {cap_api_profiles} WHERE profile_id = %d", $profile['profileId']));
  if ($id) {
    $record['id'] = $id;
    drupal_write_record('cap_api_profiles', $record, 'id');
  }
  else {
    drupal_write_record('cap_api_profiles', $record);
  }
}

/**
 * Get organization code for profile.
 *
 * @param array $profile
 *   CAP profile.
 *
 * @return string
 *   Organization code string or NULL.
 */
function _stanford_cap_api_profiles_get_organtization_code($profile) {
  $code = NULL;

  if (!empty($profile['shortTitle']) && !empty($profile['shortTitle']['organization']) && !empty($profile['shortTitle']['organization']['orgCode'])) {
    $code = $profile['shortTitle']['organization']['orgCode'];
  }

  if (empty($code) && !empty($profile['longTitle']) && !empty($profile['longTitle']['organization']) && !empty($profile['longTitle']['organization']['orgCode'])) {
    $code = $profile['longTitle']['organization']['orgCode'];
  }

  return $code;
}

/**
 * Set basic profile fields value.
 *
 * @param object $node
 *   Node object.
 * @param array $profile
 *   CAP profile array.
 */
function _stanford_cap_api_profiles_fill_basic_fields(&$node, $profile) {
  $node->field_cap_profile_link[0] = array('url' => _stanford_cap_api_profiles_get_cap_profile_url($profile));

  $node->field_cap_sync_date[0] = array('value' => REQUEST_TIME);

  // Profile image handling.
  if (!empty($profile['profilePhotos'])) {
    $image_type = 'bigger';
    $file = _stanford_cap_api_profiles_save_image_file($profile['profileId'], $image_type, $profile['profilePhotos'][$image_type]);
    if ($file) {
      $value = array(
        'fid' => $file->fid,
        'filepath' => $file->filepath,
        'list' => 1,
        'data' => array(),
      );
      $node->field_cap_profile_image[0] = $value;
    }
  }

  // Setting taxonomy.
  $taxonomy = array();
  $org_code = _stanford_cap_api_profiles_get_organtization_code($profile);
  if ($org_code) {
    $terms = taxonomy_get_term_by_name($org_code);
    if (!empty($terms)) {
      $term = array_shift($terms);
      $taxonomy[variable_get('stanford_cap_api_orgs_vid', 0)][$term->tid] = $term->tid;
      $node->taxonomy = $taxonomy;
    }
  }
}

/**
 * Save profile fields to node.
 *
 * @param object $node
 *   Nodes objects, to which fields will be attached.
 * @param array $profile
 *   Profile fetched from CAP API.
 */
function stanford_cap_api_profiles_node_fields_import($node, $profile) {
  foreach ($profile as $field_name => $field_data) {
    _stanford_cap_api_profiles_save_field($node, $field_name, $field_data);
  }
  _stanford_cap_api_profiles_fill_basic_fields($node, $profile);
  node_save($node);

  // Storing profile field hashes to check if data was changed later.
  foreach ($node as $field_name => $field_data) {
    // Want to store only fields, not node properties.
    if (is_array($field_data)) {
      $record = array(
        'profile_id' => $profile['profileId'],
        'field_name' => $field_name,
        'hash' => $field_data,
      );
      drupal_write_record('cap_api_field_hashes', $record);
    }
  }
}

/**
 * Update profile fields in node.
 *
 * @param object $node
 *   Nodes objects, to which fields will be attached.
 * @param array $profile
 *   Profile fetched from CAP API.
 */
function stanford_cap_api_profiles_node_fields_update($node, $profile) {
  foreach ($profile as $field_name => $field_data) {
    $cap_field_info = _stanford_cap_api_profiles_get_field_info_by_path($field_name);
    if (empty($cap_field_info['field_name'])) {
      // Generate Drupal compliant field name.
      $drupal_field_name = _stanford_cap_api_profiles_generate_field_name($field_name);
    }
    else {
      $drupal_field_name = $cap_field_info['field_name'];
    }
    $field_info = content_fields($drupal_field_name, 'cap_stanford_profile');
    if ($field_info) {
      if (!empty($node->{$drupal_field_name})) {
        $hash = db_result(db_query("SELECT hash FROM {cap_api_field_hashes} WHERE profile_id = '%d' AND field_name = '%s'", $profile['profileId'], $drupal_field_name));
        if ($hash == serialize($node->{$drupal_field_name})) {
          // Field data didn't changed till import, this means we can update it.
          unset($node->{$drupal_field_name});
          _stanford_cap_api_profiles_save_field($node, $field_name, $field_data);
        }
      }
      else {
        // We know about this field, but it had no data before.
        _stanford_cap_api_profiles_save_field($node, $field_name, $field_data);
      }
    }
  }
  _stanford_cap_api_profiles_fill_basic_fields($node, $profile);
  node_save($node);
  // Storing profile field hashes to check if data was changed later.
  foreach ($node as $field_name => $field_data) {
    // Want to store only fields, not node properties.
    if (is_array($field_data)) {
      $record = array(
        'profile_id' => $profile['profileId'],
        'field_name' => $field_name,
        'hash' => $field_data,
      );
      $id = db_result(db_query("SELECT id FROM {cap_api_field_hashes} WHERE profile_id = %d AND field_name = '%s'", $profile['profileId'], $field_name));
      if ($id) {
        // This field hash were stored already.
        $record['id'] = $id;
        drupal_write_record('cap_api_field_hashes', $record, 'id');
      }
      else {
        drupal_write_record('cap_api_field_hashes', $record);
      }
    }
  }
}

/**
 * Import multiple CAP profiles.
 *
 * @param array $profile_ids
 *   Array of profile ID's.
 */
function stanford_cap_api_profiles_profile_import_multiple($profile_ids) {
  foreach ($profile_ids as $profile_id) {
    stanford_cap_api_profiles_profile_import($profile_id);
  }
}

/**
 * Updates already imported profiles.
 */
function stanford_cap_api_profiles_update_profiles() {
  $result = db_query("SELECT profile_id FROM {cap_api_profiles}");
  while ($profile_id = db_result($result)) {
    stanford_cap_api_profiles_profile_import($profile_id);
  }
}

/**
 * Returns etag for specified profile from CAP.
 *
 * Etag is checksum used to determine if profile was changed in CAP.
 *
 * @param string $profile_id
 *   CAP profile ID.
 *
 * @return string|FALSE
 *   CAP profile etag or FALSE.
 */
function stanford_cap_api_profiles_get_profile_etag($profile_id) {
  $etag = FALSE;
  if (is_numeric($profile_id)) {
    $profile = stanford_cap_api_profiles_get_profile($profile_id);
    if ($profile && isset($profile['meta']['etag'])) {
      $etag = $profile['meta']['etag'];
    }
  }

  return $etag;
}

/**
 * Returns metadata for stored specified profile.
 *
 * @param string $profile_id
 *   CAP profile ID.
 *
 * @return array|FALSE
 *   CAP profile metadata or FALSE.
 */
function stanford_cap_api_profiles_get_stored_profile_data($profile_id) {
  $data = FALSE;
  if (is_numeric($profile_id)) {
    $data = db_fetch_array(db_query("SELECT * FROM {cap_api_profiles} WHERE profile_id = %d", $profile_id));
  }

  return $data;
}

/**
 * Synchronize profiles of specified organization.
 *
 * @param string $org_code
 *   CAP organization code.
 * @param array $operations
 *   Array to gather operations for batch processing, also used as indicator
 *   for batch mode.
 *
 * @return int
 *   Count of synced profiles.
 *
 * @see http://www.stanford.edu/dept/pres-provost/budget/org/orgchart/
 */
function stanford_cap_api_profiles_sync_org_members($org_code, &$operations = NULL) {
  $params = array('orgCodes' => $org_code);

  return _stanford_cap_api_sync_members($org_code, $operations, $params);
}

/**
 * Helper to sync group members.
 *
 * @param string $group
 *   Machine readable group name.
 * @param array $operations
 *   Array of operations to use in batch set definition.
 * @param array $params
 *   Array of params for stanford_cap_api_request().
 *
 * @return int
 *   Number of synced profiles.
 *
 * @see stanford_cap_api_request()
 */
function _stanford_cap_api_sync_members($group, &$operations, $params) {
  $count = 0;
  // This request used to get count of profiles of this group.
  $data = stanford_cap_api_request('/profiles/v1', $params);
  if ($data && $data['totalCount'] > 0) {
    $params['ps'] = CAP_PROFILES_PER_REQUEST;
    $requests_count = $data['totalPages'];
    for ($i = 0; $i < $requests_count; $i++) {
      $params['p'] = $i + 1;
      $data = stanford_cap_api_request('/profiles/v1', $params);
      if (!empty($data['values']) && is_array($data['values'])) {
        // Summing up received profiles.
        $count += count($data['values']);
        foreach ($data['values'] as $profile) {
          if (isset($operations)) {
            $operations[] = array(
              'stanford_cap_api_profiles_profile_import',
              array($profile['profileId']),
            );
          }
          else {
            stanford_cap_api_profiles_profile_import($profile['profileId']);
          }
        }
      }
      else {
        watchdog(
          'stanford_cap_api_profiles',
          'There was an issue while retrieving data from CAP service for "@group" group.',
          array('@group' => $group)
        );
      }
    }

  }

  return $count;
}

/**
 * Synchronize profiles of specified workgroup.
 *
 * @param string $workgroup_id
 *   CAP workgroup ID.
 * @param array $operations
 *   Array to gather operations for batch processing, also used as indicator
 *  for batch mode.
 *
 * @return int
 *   Count of synced profiles.
 */
function stanford_cap_api_profiles_sync_workgroup_members($workgroup_id, &$operations = NULL) {
  $params = array('privGroups' => $workgroup_id);

  return _stanford_cap_api_sync_members($workgroup_id, $operations, $params);
}

/**
 * Save CAP group for synchronization.
 *
 * @param string $type
 *   Type of group.
 * @param string $name
 *   Machine readable group name.
 */
function stanford_cap_api_profiles_sync_group_save($type, $name) {
  db_query("INSERT INTO {cap_api_sync_groups} (name, type) VALUES ('%s', '%s')", $name, $type);
}

/**
 * Update CAP group after synchronization.
 *
 * @param string $type
 *   Type of group.
 * @param string $name
 *   Machine readable group name.
 * @param int $count
 *   Quantity of profiles associated with this group.
 * @param int $lastsynced
 *   Last synchronization timestamp.
 */
function stanford_cap_api_profiles_sync_group_update($type, $name, $count, $lastsynced) {
  db_query("UPDATE cap_api_sync_groups SET count = %d, lastsynced = %d WHERE name = '%s' AND type = '%s'", $count, $lastsynced, $name, $type);
}

/**
 * Synchronize profiles of group.
 *
 * @param string $type
 *   Type of group.
 * @param string $name
 *   Group name.
 */
function stanford_cap_api_profiles_sync_group_sync($type, $name) {
  switch ($type) {
    case 'organization':
      $count = stanford_cap_api_profiles_sync_org_members($name);
      stanford_cap_api_profiles_sync_group_update($type, $name, $count, REQUEST_TIME);
      break;

    case 'workgroup':
      $count = stanford_cap_api_profiles_sync_workgroup_members($name);
      stanford_cap_api_profiles_sync_group_update($type, $name, $count, REQUEST_TIME);
      break;
  }
}

/**
 * Drop profiles group from synchronization.
 *
 * @param int $id
 *   Internal group ID.
 */
function stanford_cap_api_profiles_sync_group_drop($id) {
  db_query("DELETE FROM {cap_api_sync_groups} WHERE id = %d", $id);
}

/**
 * Callback for cron groups synchronization.
 */
function stanford_cap_api_profiles_sync_group_cron() {
  $result = db_query("SELECT * FROM {cap_api_sync_groups}");
  while ($group = db_fetch_array($result)) {
    stanford_cap_api_profiles_sync_group_sync($group['type'], $group['name']);
  }
}

/**
 * Implements hook_nodeapi().
 */
function stanford_cap_api_profiles_nodeapi(&$node, $op) {
  if ($op == 'delete' && $node->type == 'cap_stanford_profile') {
    db_query("DELETE FROM {cap_api_profiles} WHERE nid = %d", $node->nid);
  }
  elseif($op == 'view' && $node->type == 'cap_stanford_profile') {
    $update_strategy = variable_get('stanford_cap_api_profile_update', CAP_PROFILES_UPDATE_NIGHTLY);
    if ($update_strategy == CAP_PROFILES_UPDATE_ON_VIEW) {
      $profile_id = db_result(db_query("SELECT profile_id FROM {cap_api_profiles} WHERE nid = %d", $node->nid));
      if ($profile_id) {
        stanford_cap_api_profiles_profile_import($profile_id);
      }
    }
  }
}

/**
 * Implements hook_action_info().
 */
function stanford_cap_api_profiles_action_info() {
  return array(
    'stanford_cap_api_profiles_profile_stop_sync_action' => array(
      'type' => 'node',
      'description' => t('Stop profile synchronization'),
      'configurable' => FALSE,
      'hooks' => array('any' => TRUE),
    ),
  );
}

/**
 * Stop profile syncing action.
 */
function stanford_cap_api_profiles_profile_stop_sync_action($node) {
  if ($node->type == 'cap_stanford_profile') {
    db_query("UPDATE {cap_api_profiles} SET sync = 0 WHERE nid = %d", $node->nid);
    $count = db_affected_rows();
    if ($count == 1) {
      $profile_id = db_result(db_query("SELECT profile_id FROM {cap_api_profiles} WHERE nid = %d", $node->nid));
      watchdog(
        'stanford_cap_api_profiles',
        'Profile with ID %id will not be synced anymore.',
        array('%id' => $profile_id)
      );
    }
  }
}

/**
 * Synchronize profile structure based on profile schema.
 *
 * Could be called in 2 modes: 1) batch mode - when field creation will be
 * queued in batch operations; 2) normal mode - field will be created during
 * function execution, good for cron and drush runs.
 *
 * @param bool $batch
 *   Indicates that batch mode should be used.
 */
function stanford_cap_api_profiles_synchronize_schema($batch = FALSE) {
  if ($batch) {
    variable_set('stanford_cap_api_profiles_sync_schema_batch', REQUEST_TIME);
    $operations = array();
  }
  $schema = stanford_cap_api_profiles_get_profile_schema();
  $stored_schema_hash = variable_get('stanford_cap_api_profiles_schema_hash', '');
  if (!variable_get('stanford_cap_api_profiles_schema_synchronized', FALSE) || $stored_schema_hash != _stanford_cap_api_profiles_schema_hash($schema)) {
    // Basic check that we have an expected schema.
    if (is_array($schema) && $schema['type'] == 'object' && !empty($schema['properties'])) {
      foreach ($schema['properties'] as $f_name => $f_schema) {
        if ($batch) {
          _stanford_cap_api_profiles_synchronize_schema_subfields($f_name, $f_schema, 'cap_stanford_profile', '', $operations);
        }
        else {
          _stanford_cap_api_profiles_synchronize_schema_subfields($f_name, $f_schema, 'cap_stanford_profile');
        }
      }
      if ($batch) {
        $operations[] = array(
          'variable_set',
          array('stanford_cap_api_profiles_schema_synchronized', TRUE),
        );
        $operations[] = array(
          'node_types_rebuild',
          array(),
        );
        $batch = array(
          'title' => t('Importing CAP data'),
          'operations' => $operations,
          'finished' => '_stanford_cap_api_profiles_sync_schema_batch_finished',
          'progress_message' => t('Importing the structure of CAP profiles: @current of @total.'),
        );
        batch_set($batch);
      }
      else {
        variable_set('stanford_cap_api_profiles_schema_synchronized', TRUE);
      }
      variable_set('stanford_cap_api_profiles_schema_hash', _stanford_cap_api_profiles_schema_hash($schema));
    }
  }
}

/**
 * Get schema for profile type.
 *
 * @return array
 *   Profile type schema.
 */
function stanford_cap_api_profiles_get_profile_schema() {
  return stanford_cap_api_request('/cap/v1/schemas/profile');
}

/**
 * Implements hook_theme().
 */
function stanford_cap_api_profiles_theme() {
  return array(
    'stanford_cap_api_profiles_field_tree' => array(
      'arguments' => array('schema_tree' => array()),
      'file' => 'stanford_cap_api_profiles.theme.inc',
    ),
    'stanford_cap_api_profiles_result_tableselect' => array(
      'arguments' => array('form' => array()),
      'file' => 'stanford_cap_api_profiles.theme.inc',
    ),
    'stanford_cap_api_profiles_sync_groups_tableselect' => array(
      'arguments' => array('form' => array()),
      'file' => 'stanford_cap_api_profiles.theme.inc',
    ),
  );
}

/**
 * Writes created field name to DB.
 *
 * @param string $field_name
 *   Field name to log.
 */
function _stanford_cap_api_profiles_log_field($field_name) {
  $record = array('field_name' => $field_name);
  drupal_write_record('cap_api_fields', $record);
  watchdog('stanford_cap_api_profiles', 'Field @field was created by stanford_cap_api_profiles module.', array('@field' => $field_name));
}

/**
 * Generates CAP network profile URL.
 *
 * @todo Remove this when appropriate field would be available.
 *
 * @param array $profile
 *   CAP network profile.
 *
 * @return string
 *   CAP network profile URL.
 */
function _stanford_cap_api_profiles_get_cap_profile_url($profile) {
  $href = '';
  if (isset($profile['meta']) && !empty($profile['meta']['links'])) {
    foreach ($profile['meta']['links'] as $link) {
      // Searching for public link.
      if ($link['rel'] == 'https://cap.stanford.edu/rel/public') {
        $href = $link['href'];
        break;
      }
    }
  }
  if (empty($href)) {
    // Fallback.
    // Public profile link not found, lets generate it.
    $href = variable_get('stanford_cap_uri', 'https://profiles-beta.stanford.edu/');
    if (!empty($profile['alias'])) {
      $href .= $profile['alias'];
    }
  }

  return $href;
}

/**
 * Generate Drupal compliant field name.
 *
 * @param string $field_name
 *   CAP profile field name.
 *
 * @return string
 *   Drupal field name.
 */
function _stanford_cap_api_profiles_generate_field_name($field_name) {
  $drupal_field_name = drupal_substr(CAP_FIELDS_PREFIX . drupal_strtolower($field_name), 0, 29);
  $query = "SELECT COUNT(field_name) AS similar_fields FROM {cap_api_fields_map} WHERE field_name LIKE '%s%%'";
  $similar_fields = db_result(db_query($query, $drupal_field_name));
  if ($similar_fields) {
    $similar_fields = (int) $similar_fields;
    $drupal_field_name .= '_' . ++$similar_fields;
  }

  return $drupal_field_name;
}

/**
 * Get field info stored by CAP module by field path.
 *
 * @param string $path
 *   Full field path, like 'education.label.html'.
 *
 * @return array
 *   Array of stored info.
 * @see stanford_cap_api_profiles_schema()
 */
function _stanford_cap_api_profiles_get_field_info_by_path($path) {
  static $fields = array();
  if (empty($fields)) {
    $result = db_query("SELECT * FROM {cap_api_fields_map}");
    while ($field = db_fetch_array($result)) {
      $fields[$field['field_path']] = $field;
    }
  }

  return isset($fields[$path]) ? $fields[$path] : FALSE;
}

/**
 * Save CAP profile field value.
 *
 * @param object $node
 *   Node object.
 * @param string $field_name
 *   CAP profile field name.
 * @param array $field_data
 *   CAP profile field data.
 * @param string $parent_field
 *   Parent field name.
 */
function _stanford_cap_api_profiles_save_field(&$node, $field_name, $field_data, $parent_field = '') {
  $field_path = empty($parent_field) ? $field_name : $parent_field . '.' . $field_name;
  $cap_field_info = _stanford_cap_api_profiles_get_field_info_by_path($field_path);
  if ($cap_field_info) {
    $drupal_field_name = $cap_field_info['field_name'];
    $bundle = $cap_field_info['bundle'];
    $field_info = content_fields($drupal_field_name, $bundle);
    switch ($field_info['type']) {
      case 'date':
        if (is_string($field_data)) {
          $node_field =& _stanford_cap_api_profiles_check_data_structure($node, $field_name, $parent_field);
          $node_field[] = array('value' => $field_data);
        }
        elseif (!empty($field_data['value']) && is_string($field_data['value'])) {
          $node_field =& _stanford_cap_api_profiles_check_data_structure($node, $field_name, $parent_field);
          $node_field[] = array('value' => $field_data['value']);
        }
        break;

      case 'text':
        // They only way to separate text area from text field is to check
        // what field length is.
        switch (empty($field_info['max_length'])) {
          case TRUE:
            // Text long.
            if (is_string($field_data)) {
              $node_field =& _stanford_cap_api_profiles_check_data_structure($node, $field_name, $parent_field);
              $node_field[] = array('value' => $field_data, 'format' => stanford_cap_api_profiles_get_format());
            }
            elseif (is_array($field_data) && !empty($field_data['html']) && !empty($field_data['text']) && count($field_data) == 2) {
              $node_field =& _stanford_cap_api_profiles_check_data_structure($node, $field_name, $parent_field);
              $node_field[] = array('value' => $field_data['html'], 'format' => stanford_cap_api_profiles_get_format());
            }
            elseif (is_array($field_data) && $field_info['multiple'] == '1') {
              foreach ($field_data as $f_data) {
                if (!is_string($f_data)) {
                  $error_msg = 'Field name: @field_name. Expecting string , got: @data.';
                  $vars = array(
                    '@field_name' => $field_name,
                    '@data' => print_r($field_data, TRUE),
                  );
                  watchdog('stanford_cap_api_profiles', $error_msg, $vars, WATCHDOG_WARNING);
                  break;
                }
                else {
                  $node_field =& _stanford_cap_api_profiles_check_data_structure($node, $field_name, $parent_field);
                  $node_field[] = array('value' => $f_data, 'format' => stanford_cap_api_profiles_get_format());
                }
              }
            }
            else {
              $error_msg = 'Field name: @field_name. Expecting string , got: @data.';
              $vars = array(
                '@field_name' => $field_name,
                '@data' => print_r($field_data, TRUE),
              );
              watchdog('stanford_cap_api_profiles', $error_msg, $vars, WATCHDOG_WARNING);
              break;
            }
            break;

          case FALSE:
            // Text string.
            if (is_string($field_data)) {
              $value = _stanford_cap_api_profiles_get_field_value_text($field_name, $field_data, $field_info);
              $node_field =& _stanford_cap_api_profiles_check_data_structure($node, $field_name, $parent_field);
              $node_field[] = array('value' => $value);
            }
            elseif (is_array($field_data) && !empty($field_data['html']) && !empty($field_data['text'])) {
              $field_data = $field_data['text'];
              $value = _stanford_cap_api_profiles_get_field_value_text($field_name, $field_data, $field_info);
              $node_field =& _stanford_cap_api_profiles_check_data_structure($node, $field_name, $parent_field);
              $node_field[] = array('value' => $value);
            }
            elseif (is_array($field_data) && $field_info['multiple'] == '1') {
              foreach ($field_data as $f_data) {
                if (is_string($f_data)) {
                  $value = _stanford_cap_api_profiles_get_field_value_text($field_name, $f_data, $field_info);
                  $node_field =& _stanford_cap_api_profiles_check_data_structure($node, $field_name, $parent_field);
                  $node_field[] = array('value' => $value);
                }
                else {
                  $error_msg = 'Field name: @field_name. Expecting string, got: @data.';
                  $vars = array(
                    '@field_name' => $field_name,
                    '@data' => print_r($field_data, TRUE),
                  );
                  watchdog('stanford_cap_api_profiles', $error_msg, $vars, WATCHDOG_WARNING);
                }
              }
            }
            break;
        }
        break;

      case 'number_integer':
        if (is_numeric($field_data)) {
          $node_field =& _stanford_cap_api_profiles_check_data_structure($node, $field_name, $parent_field);
          $node_field[] = array('value' => $field_data);
        }
        break;

      case 'flexifield':
        // This is multi-value field collection.
        if (is_array($field_data) && !empty($field_data) && array_key_exists(0, $field_data)) {
          foreach ($field_data as $fc_subfield_data) {
            _stanford_cap_api_profiles_save_field($node, $field_name, $fc_subfield_data, $parent_field);
          }
        }
        else {
          if (is_array($field_data) && !empty($field_data)) {
            foreach ($field_data as $ff_subfield => $ff_subfield_data) {
              $field_path = empty($parent_field) ? $field_name : $parent_field . '.' . $field_name;
              _stanford_cap_api_profiles_save_field($node, $ff_subfield, $ff_subfield_data, $field_path);
            }
          }
        }
        break;
    }
  }
  elseif (variable_get('stanford_cap_api_import_profile_fields', CAP_FIELDS_IMPORT_ALL) == CAP_FIELDS_IMPORT_ALL) {
    // Let's log an issue when we want to import all fields, but this field
    // doesn't exists in Drupal.
    $message = 'Field "@field" was in profile, but were not defined in schema. Field data: @data';
    $vars = array(
      '@field' => $field_name,
      '@data' => print_r($field_data, TRUE),
    );
    watchdog('stanford_cap_api_profiles', $message, $vars, WATCHDOG_WARNING);
  }
}

/**
 * Get field value for text field.
 *
 * Truncate profile field length to maximum allowed for Drupal field.
 *
 * @param string $field_name
 *   Field name.
 * @param array $field_data
 *   Field data to process.
 * @param array $field_info
 *   Field info.
 *
 * @return string
 *   String to save as field value.
 */
function _stanford_cap_api_profiles_get_field_value_text($field_name, $field_data, $field_info) {
  $max_length = $field_info['max_length'];
  $data_length = strlen($field_data);
  if ($data_length > $max_length) {
    $value = drupal_substr($field_data, 0, $max_length);
    $error_msg = 'Field "@field_name" data truncated. Expected data length "@length", got "@got".';
    $vars = array(
      '@field_name' => $field_name,
      '@length' => $max_length,
      '@got' => $data_length,
    );
    watchdog('stanford_cap_api_profiles', $error_msg, $vars, WATCHDOG_WARNING);
    _stanford_cap_api_profiles_log_longest_field_length($data_length);

    return $value;
  }
  else {
    return $field_data;
  }
}

/**
 * Generate field info based in field schema.
 *
 * @param string $drupal_field_name
 *   Generated Drupal field name.
 * @param string $field_name
 *   Field name form CAP API.
 * @param array $field_schema
 *   Field schema form CAP API.
 * @param string $field_path
 *   Field path for layout.
 * @param string $drupal_parent_field
 *   Drupal parent field name.
 *
 * @return array
 *   Array used in field_create_field().
 * @see field_create_field()
 */
function _stanford_cap_api_profiles_generate_field_info($drupal_field_name, $field_name, $field_schema, $field_path, $drupal_parent_field) {
  $info = NULL;
  switch ($field_schema['type']) {
    case 'array':
      switch ($field_schema['items']['type']) {
        case 'string':
          $clob_fields = variable_get('stanford_cap_api_profiles_text_fields_list', array());
          if (in_array($field_path, $clob_fields)) {
            $info = _stanford_cap_api_profiles_gen_field_base_def_text_long($drupal_field_name, $field_name, $field_schema, $drupal_parent_field, TRUE);
          }
          else {
            $info = _stanford_cap_api_profiles_gen_field_base_def_text($drupal_field_name, $field_name, $field_schema, $drupal_parent_field, TRUE);
          }
          break;

        case 'object':
          $info = _stanford_cap_api_profiles_gen_field_base_def_field_collection($drupal_field_name, $field_name, $field_schema, $drupal_parent_field, TRUE);
          break;

        default:
          $message = 'Unknown field items type "@type" in CAP profile schema: @schema';
          $vars = array(
            '@type' => $field_schema['items']['type'],
            '@schema' => print_r($field_schema, TRUE),
          );
          watchdog('stanford_cap_api_profiles', $message, $vars, WATCHDOG_WARNING);
      }
      break;

    case 'object':
      if (!empty($field_schema['properties'])) {
        $props = $field_schema['properties'];
        // This is not the real collection.
        // Simple string.
        if (variable_get('stanford_cap_api_import_fields_html', TRUE) && isset($props['html']) && isset($props['text']) && count($props) == 2) {
          $props['html']['title'] = empty($field_schema['title']) ? $field_name : $field_schema['title'];
          $props['html']['description'] = empty($field_schema['description']) ? '' : $field_schema['description'];
          $props['html']['weight'] = empty($props['html']['weight']) ? $field_schema['weight'] : $props['html']['weight'];
          $info = _stanford_cap_api_profiles_gen_field_base_def_text_long($drupal_field_name, $field_name, $props['html'], $drupal_parent_field);
        }
        // Date field.
        elseif (isset($props['value']) && isset($props['html']) && isset($props['text']) && count($props) == 3) {
          $schema = $props['value'];
          if ($schema['type'] == 'string') {
            if (isset($schema['format']) && $schema['format'] == 'DATE_TIME') {
              $info = _stanford_cap_api_profiles_gen_field_base_def_date($drupal_field_name, $field_name, $schema, $drupal_parent_field);
            }
          }
        }
        else {
          $info = _stanford_cap_api_profiles_gen_field_base_def_field_collection($drupal_field_name, $field_name, $field_schema, $drupal_parent_field);
        }
      }
      break;

    case 'string':
      $clob_fields = variable_get('stanford_cap_api_profiles_text_fields_list', array());
      if (in_array($field_path, $clob_fields)) {
        $info = _stanford_cap_api_profiles_gen_field_base_def_text_long($drupal_field_name, $field_name, $field_schema, $drupal_parent_field);
      }
      else {
        $info = _stanford_cap_api_profiles_gen_field_base_def_text($drupal_field_name, $field_name, $field_schema, $drupal_parent_field);
      }
      break;

    case 'boolean':
      $info = _stanford_cap_api_profiles_gen_field_base_def_boolean($drupal_field_name, $field_name, $field_schema, $drupal_parent_field);
      break;

    case 'integer':
      $info = _stanford_cap_api_profiles_gen_field_base_def_integer($drupal_field_name, $field_name, $field_schema, $drupal_parent_field);
      break;

    default:
      $message = 'Unknown field type "@type" in CAP profile schema: @schema';
      $vars = array(
        '@type' => $field_schema['type'],
        '@schema' => print_r($field_schema, TRUE),
      );
      watchdog('stanford_cap_api_profiles', $message, $vars, WATCHDOG_WARNING);
  }

  return $info;
}

/**
 * Helper to synchronize CAP profile fields structure.
 *
 * @param string $f_name
 *   CAP API profile field name.
 * @param array $f_schema
 *   CAP API profile field schema.
 * @param string $drupal_parent_field
 *   Drupal parent field name.
 * @param string $parent_field
 *   Parent field name.
 * @param array $operations
 *   Array to gather operations for batch processing, also used as indicator
 *   for batch mode.
 */
function _stanford_cap_api_profiles_synchronize_schema_subfields($f_name, $f_schema, $drupal_parent_field = '', $parent_field = '', &$operations = NULL) {
  static $field_weigth = 1;
  $field_path = empty($parent_field) ? $f_name : $parent_field . '.' . $f_name;
  $cap_field_info = _stanford_cap_api_profiles_get_field_info_by_path($field_path);
  if (empty($cap_field_info['field_name'])) {
    // Generate Drupal compliant field name.
    $drupal_field_name = _stanford_cap_api_profiles_generate_field_name($f_name);
  }
  else {
    $drupal_field_name = $cap_field_info['field_name'];
  }
  $field_info = content_fields($drupal_field_name, $drupal_parent_field);

  if (empty($field_info) && stanford_cap_api_profiles_synchronize_field($field_path)) {
    if (!isset($f_schema['weight'])) {
      $f_schema['weight'] = $field_weigth;
      $field_weigth += 0.1;
    }
    $field_info = _stanford_cap_api_profiles_generate_field_info($drupal_field_name, $f_name, $f_schema, $field_path, $drupal_parent_field);
    // Do we know about this field type?
    if (!empty($field_info)) {
      // We are in batch mode.
      if (isset($operations)) {
        $operations[] = array(
          '_stanford_cap_api_profiles_field_create',
          array($field_info),
        );
      }
      else {
        _stanford_cap_api_profiles_field_create($field_info);
      }
      // Logging field creation.
      _stanford_cap_api_profiles_store_field_map($drupal_field_name, $field_path, $field_info['type'], $drupal_parent_field);
    }
  }

  if (isset($field_info['type']) && $field_info['type'] == 'flexifield') {
    $flexi_node = node_get_types('type', $drupal_field_name);
    if (empty($flexi_node)) {
      $flexi_node = new stdClass();
      $flexi_node->name = $field_info['widget']['label'];
      $flexi_node->description = $field_info['widget']['description'];
      $flexi_node->has_title = 1;
      $flexi_node->title_label = t('Title');
      $flexi_node->has_body = 0;
      $flexi_node->body_label = '';
      $flexi_node->module = 'node';
      $flexi_node->type = $drupal_field_name;
      $flexi_node->orig_type = '';
      $flexi_node->custom = FALSE;
      $flexi_node->locked = TRUE;
      $flexi_node->modified = FALSE;
      // We are in batch mode.
      if (isset($operations)) {
        $operations[] = array(
          'node_type_save',
          array($flexi_node),
        );
      }
      else {
        node_type_save($flexi_node);
      }
    }

    static $subfield_weigth = array();
    if (!isset($subfield_weigth[$drupal_field_name])) {
      $subfield_weigth[$drupal_field_name] = 1;
    }
    $subfields = array();
    // Multivalue field colletion.
    if ($f_schema['type'] == 'array' && $f_schema['items']['type'] == 'object') {
      $subfields = $f_schema['items']['properties'];
    }
    elseif ($f_schema['type'] == 'object' && !empty($f_schema['properties'])) {
      $subfields = $f_schema['properties'];
    }

    foreach ($subfields as $subfield => $schema) {
      if (!isset($schema['weight'])) {
        $schema['weight'] = $subfield_weigth[$drupal_field_name];
        $subfield_weigth[$drupal_field_name] += 0.1;
      }
      // We need this field to successfully apply profile layout.
      $field_path = empty($parent_field) ? $f_name : $parent_field . '.' . $f_name;
      _stanford_cap_api_profiles_synchronize_schema_subfields($subfield, $schema, $drupal_field_name, $field_path, $operations);
    }
  }
}

/**
 * Wrapper around content_field_instance_create().
 *
 * @param array $field_info
 *   Field info.
 */
function _stanford_cap_api_profiles_field_create($field_info) {
  module_load_include('inc', 'content', 'includes/content.crud');
  drupal_alter('stanford_cap_api_profiles_field_create', $field_info);
  content_field_instance_create($field_info);
}

/**
 * Set proper field label, description, weight and cardinality settings.
 *
 * @param array $field_info
 *   Field info array to pass to content_field_instance_create().
 * @param string $drupal_field_name
 *   Drupal field name.
 * @param string $field_name
 *   CAP field name.
 * @param array $schema
 *   Field schema form CAP API.
 * @param string $parent_field
 *   Parent field name.
 * @param bool $multivalue
 *   Indicates if the field is multivalue.
 */
function _stanford_cap_api_profiles_field_init(&$field_info, $drupal_field_name, $field_name, $schema, $parent_field, $multivalue = FALSE) {
  $field_info['field_name'] = $drupal_field_name;
  $field_info['type_name'] = $parent_field;
  $field_info['multiple'] = $multivalue ? 1 : 0;
  $field_info['widget']['label'] = empty($schema['title']) ? $field_name : $schema['title'];
  $field_info['widget']['description'] = empty($schema['description']) ? '' : $schema['description'];
  $field_info['widget']['weight'] = $schema['weight'];
}

/**
 * Generate field info for text field.
 *
 * @param string $drupal_field_name
 *   Drupal field name.
 * @param string $field_name
 *   CAP field name.
 * @param array $field_schema
 *   Field schema form CAP API.
 * @param string $parent_field
 *   Parent field name.
 * @param bool $multivalue
 *   Indicates if the field is multivalue.
 *
 * @return array
 *   Array used in field_create_field().
 * @see field_create_field()
 */
function _stanford_cap_api_profiles_gen_field_base_def_text($drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue = FALSE) {

  $info = array(
    'field_name' => 'field_text',
    'type_name' => 'bundle',
    'display_settings' => array(
      'label' => array(
        'format' => 'above',
        'exclude' => 0,
      ),
      'teaser' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      'full' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      '4' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
    ),
    'widget_active' => '1',
    'type' => 'text',
    'required' => '0',
    'multiple' => '0',
    'module' => 'text',
    'active' => '1',
    'text_processing' => '0',
    'max_length' => '512',
    'allowed_values' => '',
    'allowed_values_php' => '',
    'widget' => array(
      'rows' => 5,
      'size' => '60',
      'default_value' => array(
        '0' => array(
          'value' => '',
          '_error_element' => 'default_value_widget][field_text][0][value',
        ),
      ),
      'default_value_php' => NULL,
      'label' => 'Text',
      'weight' => '32',
      'description' => '',
      'type' => 'text_textfield',
      'module' => 'text',
    ),
  );

  _stanford_cap_api_profiles_field_init($info, $drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue);

  return $info;
}

/**
 * Generate field info for text_long field.
 *
 * @param string $drupal_field_name
 *   Drupal field name.
 * @param string $field_name
 *   CAP field name.
 * @param array $field_schema
 *   Field schema form CAP API.
 * @param string $parent_field
 *   Parent field name.
 * @param bool $multivalue
 *   Indicates if the field is multivalue.
 *
 * @return array
 *   Array used in field_create_field().
 * @see field_create_field()
 */
function _stanford_cap_api_profiles_gen_field_base_def_text_long($drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue = FALSE) {

  $info = array(
    'field_name' => 'field_text_long',
    'type_name' => 'bundle',
    'display_settings' => array(
      'label' => array(
        'format' => 'above',
        'exclude' => 0,
      ),
      'teaser' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      'full' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      '4' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
    ),
    'widget_active' => '1',
    'type' => 'text',
    'required' => '0',
    'multiple' => '0',
    'module' => 'text',
    'active' => '1',
    'text_processing' => '1',
    'max_length' => '',
    'allowed_values' => '',
    'allowed_values_php' => '',
    'widget' => array(
      'rows' => '5',
      'size' => 60,
      'default_value' => array(
        '0' => array(
          'value' => '',
          '_error_element' => 'default_value_widget][field_text_long][0][value',
        ),
      ),
      'default_value_php' => NULL,
      'label' => 'Text long',
      'weight' => '31',
      'description' => '',
      'type' => 'text_textarea',
      'module' => 'text',
    ),
  );

  _stanford_cap_api_profiles_field_init($info, $drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue);

  return $info;
}

/**
 * Generate field info for integer field.
 *
 * @param string $drupal_field_name
 *   Drupal field name.
 * @param string $field_name
 *   CAP field name.
 * @param array $field_schema
 *   Field schema form CAP API.
 * @param string $parent_field
 *   Parent field name.
 * @param bool $multivalue
 *   Indicates if the field is multivalue.
 *
 * @return array
 *   Array used in field_create_field().
 * @see field_create_field()
 */
function _stanford_cap_api_profiles_gen_field_base_def_integer($drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue = FALSE) {
  $info = array(
    'field_name' => 'field_integer',
    'type_name' => 'bundle',
    'display_settings' => array(
      'label' => array(
        'format' => 'above',
        'exclude' => 0,
      ),
      'teaser' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      'full' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      '4' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
    ),
    'widget_active' => '1',
    'type' => 'number_integer',
    'required' => '0',
    'multiple' => '0',
    'module' => 'number',
    'active' => '1',
    'prefix' => '',
    'suffix' => '',
    'min' => '',
    'max' => '',
    'allowed_values' => '',
    'allowed_values_php' => '',
    'widget' => array(
      'default_value' => array(
        '0' => array(
          'value' => '',
          '_error_element' => 'default_value_widget][field_integer][0][value',
        ),
      ),
      'default_value_php' => NULL,
      'label' => 'Integer',
      'weight' => '36',
      'description' => '',
      'type' => 'number',
      'module' => 'number',
    ),
  );

  _stanford_cap_api_profiles_field_init($info, $drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue);

  return $info;
}

/**
 * Generate field info for field collection field.
 *
 * @param string $drupal_field_name
 *   Drupal field name.
 * @param string $field_name
 *   CAP field name.
 * @param array $field_schema
 *   Field schema form CAP API.
 * @param string $parent_field
 *   Parent field name.
 * @param bool $multivalue
 *   Indicates if the field is multivalue.
 *
 * @return array
 *   Array used in field_create_field().
 * @see field_create_field()
 */
function _stanford_cap_api_profiles_gen_field_base_def_field_collection($drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue = FALSE) {
  $items = array($drupal_field_name => $drupal_field_name);
  $info = array(
    'field_name' => 'field_flexifield',
    'type_name' => 'bundle',
    'display_settings' => array(
      'label' => array(
        'format' => 'above',
        'exclude' => 0,
      ),
      'teaser' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      'full' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      '4' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
    ),
    'widget_active' => '1',
    'type' => 'flexifield',
    'required' => '0',
    'multiple' => '0',
    'module' => 'flexifield',
    'active' => '1',
    'item_types' => $items,
    'widget' => array(
      'disable_tabledrag' => 1,
      'disable_tabledrag_children' => NULL,
      'default_value' => array(
        '0' => '',
      ),
      'default_value_php' => NULL,
      'label' => 'Flexi',
      'weight' => '34',
      'description' => '',
      'type' => 'flexifield_default_widget',
      'module' => 'flexifield',
    ),
  );

  _stanford_cap_api_profiles_field_init($info, $drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue);

  return $info;
}

/**
 * Generate field info for boolean field.
 *
 * @param string $drupal_field_name
 *   Drupal field name.
 * @param string $field_name
 *   CAP field name.
 * @param array $field_schema
 *   Field schema form CAP API.
 * @param string $parent_field
 *   Parent field name.
 * @param bool $multivalue
 *   Indicates if the field is multivalue.
 *
 * @return array
 *   Array used in field_create_field().
 * @see field_create_field()
 */
function _stanford_cap_api_profiles_gen_field_base_def_boolean($drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue = FALSE) {
  $info = array(
    'field_name' => 'field_boolean',
    'type_name' => 'bundle',
    'display_settings' => array(
      'label' => array(
        'format' => 'above',
        'exclude' => 0,
      ),
      'teaser' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      'full' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      '4' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
    ),
    'widget_active' => '1',
    'type' => 'number_integer',
    'required' => '0',
    'multiple' => '0',
    'module' => 'number',
    'active' => '1',
    'prefix' => '',
    'suffix' => '',
    'min' => '',
    'max' => '',
    'allowed_values' => '0|No
1|Yes',
    'allowed_values_php' => '',
    'widget' => array(
      'default_value' => array(
        '0' => array(
          'value' => NULL,
        ),
      ),
      'default_value_php' => NULL,
      'label' => 'Boolean',
      'weight' => '35',
      'description' => '',
      'type' => 'optionwidgets_onoff',
      'module' => 'optionwidgets',
    ),
  );

  _stanford_cap_api_profiles_field_init($info, $drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue);

  return $info;
}

/**
 * Generate field info for date field.
 *
 * @param string $drupal_field_name
 *   Drupal field name.
 * @param string $field_name
 *   CAP field name.
 * @param array $field_schema
 *   Field schema form CAP API.
 * @param string $parent_field
 *   Parent field name.
 * @param bool $multivalue
 *   Indicates if the field is multivalue.
 *
 * @return array
 *   Array used in field_create_field().
 * @see field_create_field()
 */
function _stanford_cap_api_profiles_gen_field_base_def_date($drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue = FALSE) {
  $info = array(
    'field_name' => 'field_date',
    'type_name' => 'flexibundle',
    'display_settings' => array(
      'label' => array(
        'format' => 'above',
        'exclude' => 0,
      ),
      'teaser' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      'full' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
      '4' => array(
        'format' => 'default',
        'exclude' => 0,
      ),
    ),
    'widget_active' => '1',
    'type' => 'datetime',
    'required' => '0',
    'multiple' => '0',
    'module' => 'date',
    'active' => '1',
    'granularity' => array(
      'year' => 'year',
      'month' => 'month',
      'day' => 'day',
      'hour' => 'hour',
      'minute' => 'minute',
    ),
    'timezone_db' => 'UTC',
    'tz_handling' => 'site',
    'todate' => '',
    'repeat' => 0,
    'repeat_collapsed' => '',
    'default_format' => 'long',
    'widget' => array(
      'default_value' => 'blank',
      'default_value_code' => '',
      'default_value2' => 'same',
      'default_value_code2' => '',
      'input_format' => 'm/d/Y - H:i:s',
      'input_format_custom' => '',
      'increment' => 1,
      'text_parts' => array(),
      'year_range' => '-3:+3',
      'label_position' => 'above',
      'label' => 'Date',
      'weight' => '36',
      'description' => '',
      'type' => 'date_text',
      'module' => 'date',
    ),
  );

  _stanford_cap_api_profiles_field_init($info, $drupal_field_name, $field_name, $field_schema, $parent_field, $multivalue);

  return $info;
}

/**
 * We might want to know largest field size.
 */
function _stanford_cap_api_profiles_log_longest_field_length($length) {
  $stored_length = variable_get('stanford_cap_api_profiles_longest_field_length', 0);
  if ($stored_length < $length) {
    variable_set('stanford_cap_api_profiles_longest_field_length', $length);
  }
}

/**
 * Logs field instance mapping to profile fields.
 *
 * Mapping done in the way it's done in CAP API layout schema.
 *
 * @param string $field_name
 *   Drupal field name.
 * @param string $field_path
 *   Field path for layout.
 * @param string $entity_type
 *   Entity type.
 * @param string $bundle
 *   Entity bundle.
 */
function _stanford_cap_api_profiles_store_field_map($field_name, $field_path, $entity_type, $bundle) {
  $record = array(
    'field_name' => $field_name,
    'field_path' => $field_path,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
  );
  drupal_write_record('cap_api_fields_map', $record);
}

/**
 * Get schema hash.
 *
 * @param array $schema
 *   Profile schema.
 *
 * @return string
 *   Profile schema hash.
 */
function _stanford_cap_api_profiles_schema_hash($schema) {
  return md5(var_export($schema, TRUE));
}

/**
 * Helper to show some info about schema synchronization batch.
 */
function _stanford_cap_api_profiles_sync_schema_batch_finished() {
  $time = REQUEST_TIME - variable_get('stanford_cap_api_profiles_sync_schema_batch', 0);
  variable_del('stanford_cap_api_profiles_sync_schema_batch');
  drupal_set_message(t('Fields successfully synchronized.'));
  drupal_set_message(t('This operation took %time seconds.', array('%time' => $time)));
  menu_rebuild();
}

/**
 * Helper to trigger schema synchronization in batch mode.
 */
function _stanford_cap_api_profiles_sync_schema_batch() {
  stanford_cap_api_profiles_synchronize_schema(TRUE);
}

/**
 * Helper to save profile image to file.
 *
 * @param int $profile_id
 *   Profile ID.
 * @param string $field_name
 *   Profile field name.
 * @param array $field_data
 *   Field data.
 *
 * @return object
 *   File or NULL in case of error.
 */
function _stanford_cap_api_profiles_save_image_file($profile_id, $field_name, $field_data) {
  $ext = drupal_substr($field_data['contentType'], 6);
  $request_url = $field_data['url'];

  $response = drupal_http_request($request_url);
  if (property_exists($response, 'error')) {
    $error_msg = 'Failed to fetch profile image of field "%field_name" for profile "%profile_id". Error code is "%code", error message is "%msg", request string was "%request".';
    $vars = array(
      '%code' => $response->code,
      '%msg' => $response->status_message,
      '%request' => $request_url,
      '%profile_id' => $profile_id,
      '%field_name' => $field_name,
    );
    watchdog('stanford_cap_api_profiles', $error_msg, $vars, WATCHDOG_WARNING);

    return NULL;
  }
  else {
    $filename = 'profile_' . $profile_id . '_' . $field_data['type'] . '.' . $ext;
    $path = file_directory_path() . '/cap_profile_images/' . $filename;
    $file_full_path = getcwd() . '/' . $path;
    // Check if file exists and size doesn't changed.
    if (file_exists($file_full_path) && filesize($file_full_path) == strlen($response->data)) {
      $fid = db_result(db_query("SELECT fid FROM {files} WHERE filepath = '%s'", $path));
      if ($fid) {
        // File have entry in DB, nothing to do.
        $file = new stdClass();
        $file->fid = $fid;
        $file->filepath = $path;

        return $file;
      }
    }

    if (!($dir = file_create_path($path))) {
      watchdog('stanford_cap_api_profiles', 'Failed to create directory %dir', array('%dir' => $dir), WATCHDOG_WARNING);

      return NULL;
    }
    $path = file_save_data($response->data, $path, FILE_EXISTS_REPLACE);
    $file = new stdClass();
    $file->filename = $filename;
    $file->filepath = $path;
    $file->filemime = file_get_mimetype($file->filename);
    $file->filesize = filesize(getcwd() . '/' . $path);
    $file->status = FILE_STATUS_PERMANENT;
    $file->timestamp = REQUEST_TIME;
    drupal_write_record('files', $file);

    return $file;
  }
}

/**
 * Helper for batch to store correct sync time.
 */
function _stanford_cap_api_profiles_sync_group_save_wrapper($type, $name, $count) {
  stanford_cap_api_profiles_sync_group_update($type, $name, $count, REQUEST_TIME);
}

/**
 * Indicates does this field should be imported or not based on field path.
 *
 * @param string $field_path
 *   Field path.
 *
 * @return bool
 *   Indicates if we should synchronize this field.
 */
function stanford_cap_api_profiles_synchronize_field($field_path) {
  $synchronize = FALSE;
  switch (variable_get('stanford_cap_api_import_profile_fields', CAP_FIELDS_IMPORT_ALL)) {
    case CAP_FIELDS_IMPORT_ALL:
      $synchronize = TRUE;
      break;

    case CAP_FIELDS_IMPORT_LIST:
      $field_list = variable_get('stanford_cap_api_profiles_sync_field_list', array());
      $synchronize = _stanford_cap_api_profiles_synchronize_field($field_path, $field_list);
      break;

    case CAP_FIELDS_IMPORT_LAYOUT:
      if (module_exists('stanford_cap_api_profiles_layout')) {
        $plain_layout = stanford_cap_api_profiles_layout_get_plain();
        $synchronize = _stanford_cap_api_profiles_synchronize_field($field_path, $plain_layout);
      }
      else {
        $synchronize = TRUE;
      }
      break;
  }

  return $synchronize;
}

/**
 * Indicates does this field should be imported or not based on field path.
 *
 * @param string $field_path
 *   Field path.
 * @param array $field_list
 *   Array of fields to be synced.
 *
 * @return bool
 */
function _stanford_cap_api_profiles_synchronize_field($field_path, $field_list) {
  $synchronize = FALSE;
  if (in_array($field_path, $field_list)) {
    $synchronize = TRUE;
  }
  else {
    // Top level field.
    if (strpos($field_path, '.') === FALSE) {
      // SUNET ID field should be included no matter what.
      if ($field_path == 'uid') {
        $synchronize = TRUE;
      }
      else {
        // This field didn't listed directly, but maybe it's parent of other
        // field.
        foreach ($field_list as $layout_field_path) {
          if (in_array($field_path, explode('.', $layout_field_path))) {
            $synchronize = TRUE;
            break;
          }
        }
      }
    }
    else {
      $levels = count(explode('.', $field_path));
      foreach ($field_list as $layout_field_path) {
        $layout_field_path_part = implode('.', array_slice(explode('.', $layout_field_path), 0, $levels));
        if ($field_path == $layout_field_path_part) {
          $synchronize = TRUE;
          break;
        }
      }
    }
  }

  return $synchronize;
}

/**
 * Implements hook_views_default_views_alter().
 *
 * Disables 'Manage profiles' view if profiles schema not synchronized yet.
 */
function stanford_cap_api_profiles_views_default_views_alter(&$views) {
  if (!variable_get('stanford_cap_api_profiles_schema_synchronized', FALSE) && isset($views['cap_api_manage_profiles'])) {
    $views['cap_api_manage_profiles']->disabled = TRUE;
  }
}

/**
 * Prepare node fields data structure.
 *
 * Returns link to nodes field new value can be set to.
 *
 * @param object $node
 *   Node object.
 * @param string $field_name
 *   CAP field name.
 * @param string $parent_field
 *   Parent field name.
 *
 * @return array
 *   Linked to nodes field array.
 */
function &_stanford_cap_api_profiles_check_data_structure(&$node, $field_name, $parent_field) {
  $field_path = empty($parent_field) ? $field_name : $parent_field . '.' . $field_name;
  $levels = explode('.', $field_path);
  $level_num = count($levels);
  $cap_field_info = _stanford_cap_api_profiles_get_field_info_by_path($field_path);
  $drupal_field_name = $cap_field_info['field_name'];
  switch ($level_num) {
    case 1:
      // Top level field.
      if (!isset($node->{$drupal_field_name})) {
        $node->{$drupal_field_name} = array();
      }
      else {
        $field_info = content_fields($drupal_field_name, $cap_field_info['bundle']);
        // Lets check last value and drop it if empty.
        $delta = count($node->{$drupal_field_name}) - 1;
        $empty = TRUE;
        foreach ($field_info['columns'] as $column => $data) {
          if (!empty($node->{$drupal_field_name}[$delta][$column])) {
            $empty = FALSE;
            break;
          }
        }
        if ($empty) {
          unset($node->{$drupal_field_name}[$delta]);
        }
      }
      $node_field =& $node->{$drupal_field_name};
      break;

    default:
      for ($i = 1; $i < $level_num; $i++) {
        $path = implode('.', array_slice($levels, 0, $i));
        $info = _stanford_cap_api_profiles_get_field_info_by_path($path);
        $field_info = content_fields($info['field_name'], $info['bundle']);
        if ($i === 1) {
          // In the first step we must fill in $values array.
          if (!isset($node->{$info['field_name']})) {
            $node->{$info['field_name']}[0] = array('value' => array(), 'type' => $info['field_name']);
            $node_field =& $node->{$info['field_name']}[0]['value'];
          }
          else {
            // Lets check last value and drop it if empty.
            $delta = count($node->{$info['field_name']}) - 1;
            $empty = TRUE;
            foreach ($field_info['columns'] as $column => $data) {
              if (!empty($node->{$info['field_name']}[$delta][$column])) {
                $empty = FALSE;
                break;
              }
            }
            if ($empty) {
              unset($node->{$info['field_name']}[$delta]);
            }

            $node->{$info['field_name']}[] = array('value' => array(), 'type' => $info['field_name']);
            $delta = count($node->{$info['field_name']}) - 1;
            $node_field =& $node->{$info['field_name']}[$delta]['value'];
          }
        }
        else {
          if (!isset($node_field[$info['field_name']])) {
            $node_field[$info['field_name']][0] = array('value' => array(), 'type' => $info['field_name']);
            $node_field =& $node_field[$info['field_name']][0]['value'];
          }
          else {
            // Lets check last value and drop it if empty.
            $delta = count($node_field[$info['field_name']]) - 1;
            $empty = TRUE;
            foreach ($field_info['columns'] as $column => $data) {
              if (!empty($node_field[$info['field_name']][$delta][$column])) {
                $empty = FALSE;
                break;
              }
            }
            if ($empty) {
              unset($node_field[$info['field_name']][$delta]);
            }

            $node_field[$info['field_name']][] = array('value' => array(), 'type' => $info['field_name']);
            $delta = count($node_field[$info['field_name']]) - 1;
            $node_field =& $node_field[$info['field_name']][$delta]['value'];
          }
        }
      }
      $node_field[$drupal_field_name] = array();
      $node_field =& $node_field[$drupal_field_name];
  }

  return $node_field;
}

/**
 * Returns format ID for CAP profiles.
 *
 * @return int
 *   Format ID.
 */
function stanford_cap_api_profiles_get_format() {
  $format = variable_get('stanford_cap_api_profiles_format', NULL);
  if (!$format) {
    $format = db_result(db_query("SELECT format FROM {filter_formats} WHERE name = 'Full HTML for CAP profiles'"));
    variable_set('stanford_cap_api_profiles_format', $format);
  }
  if (!$format) {
    $format = variable_get('filter_default_format', 1);
  }

  return $format;
}

/**
 * Implements hook_content_types_overview_alter().
 *
 * Hide all content types created by this module
 * if "Allow user to create custom fields?" setting is empty.
 */
function stanford_cap_api_profiles_content_types_overview_alter(&$header, &$rows) {
  if (!variable_get('stanford_cap_api_profile_custom_fields', FALSE)) {
    $flexifields_list = _stanford_cap_api_profiles_get_flexifields();
    foreach ($rows as $key => $row) {
      if (in_array($row[1], $flexifields_list)) {
        unset($rows[$key]);
      }
    }
  }
}

/**
 * Returns list of all created flexifields.
 *
 * @return array
 *   List of all created flexifields.
 */
function _stanford_cap_api_profiles_get_flexifields() {
  static $list = array();
  if (empty($list)) {
    $result = db_query("SELECT field_name FROM {cap_api_fields_map} WHERE entity_type = 'flexifield' ");
    while ($field_name = db_result($result)) {
      $list[] = $field_name;
    }
  }

  return $list;
}

function test() {
  stanford_cap_api_profiles_profile_import(29317);
}